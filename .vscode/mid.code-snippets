{
	"SET MID": {
		"scope": "cpp",
		"prefix": "setmid",
		"body": [
			"template<typename cmp>",
			"struct DELHEAP {",
			"\ti64 sum = 0;",
			"",
			"\tstd::priority_queue<int, std::vector<int>, cmp> q, d;",
			"",
			"\tint size() {",
			"\t\treturn q.size() - d.size();",
			"\t}",
			"",
			"\tbool empty() {",
			"\t\treturn size() == 0;",
			"\t}",
			"",
			"\tvoid push(int x) {",
			"\t\tq.push(x);",
			"\t\tsum += x;",
			"\t}",
			"",
			"\tvoid erase(int x) {",
			"\t\td.push(x);",
			"\t\tsum -= x;",
			"\t}",
			"",
			"\tint top() {",
			"\t\twhile (!q.empty() && !d.empty() && q.top() == d.top()) {",
			"\t\t\tq.pop();",
			"\t\t\td.pop();",
			"\t\t}",
			"\t\treturn q.top();",
			"\t}",
			"\t",
			"\tvoid pop() {",
			"\t\terase(q.top());",
			"\t}",
			"};",
			"",
			"struct SET_MID {",
			"\tDELHEAP<std::less<int>> L;",
			"\tDELHEAP<std::greater<int>> R;",
			"",
			"\tvoid adjust() {",
			"\t\twhile (L.size() > R.size()) {",
			"\t\t\tR.push(L.top());",
			"\t\t\tL.pop();",
			"\t\t}",
			"\t\twhile (R.size() > L.size()) {",
			"\t\t\tL.push(R.top());",
			"\t\t\tR.pop();",
			"\t\t}",
			"\t}",
			"",
			"\tvoid insert(int x) {",
			"\t\tif (L.empty() || x <= L.top()) {",
			"\t\t\tL.push(x);",
			"\t\t} else {",
			"\t\t\tR.push(x);",
			"\t\t}",
			"\t\tadjust();",
			"\t}",
			"",
			"\tvoid erase(int x) {",
			"\t\tif (x <= L.top()) {",
			"\t\t\tL.erase(x);",
			"\t\t} else {",
			"\t\t\tR.erase(x);",
			"\t\t}",
			"\t\tadjust();",
			"\t}",
			"",
			"\ti64 sum() {",
			"\t\t// std::cout << L.sum << ' ' << R.sum << endl;",
			"\t\ti64 res = R.sum - L.sum;",
			"\t\tif (L.size() > R.size()) {",
			"\t\t\tres += L.top();",
			"\t\t}",
			"\t\treturn res;",
			"\t}",
			"};"
		],
		"description": "Dynamic maintain median values."
	}
}