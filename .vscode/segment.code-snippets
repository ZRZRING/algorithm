{
	"Segment Tree": {
		"scope": "cpp",
		"prefix": "SEG",
		"body": [
			"class TAG {",
			"public:",
			"\tTAG() {}",
			"\tTAG() {}",
			"};",
			"",
			"class DATA {",
			"public:",
			"\tTAG tag;",
			"",
			"\tDATA() {}",
			"\tDATA() {}",
			"",
			"\tstatic DATA merge(DATA a, DATA b) {",
			"\t\t",
			"\t}",
			"",
			"\tvoid update(int l, int r, TAG t) {",
			"\t\t",
			"\t}",
			"};",
			"",
			"class SEG {",
			"public:",
			"\t#define ls x << 1",
			"\t#define rs x << 1 | 1",
			"",
			"\tint n;",
			"",
			"\tstd::vector<DATA> data;",
			"",
			"\tSEG(int n) : n(n) {",
			"\t\tdata.resize(n * 4);",
			"\t}",
			"",
			"\tvoid update(int x, int l, int r, TAG t) {",
			"\t\tdata[x].update(l, r, t);",
			"\t}",
			"",
			"\tvoid pushup(int x) {",
			"\t\tdata[x] = DATA::merge(data[ls], data[rs]);",
			"\t}",
			"",
			"\tvoid pushdown(int x, int l, int r, int mid) {",
			"\t\tupdate(ls, l, mid, data[x].tag);",
			"\t\tupdate(rs, mid + 1, r, data[x].tag);",
			"\t\tdata[x].tag = TAG();",
			"\t}",
			"",
			"\tvoid modify(int x, int l, int r, int L, int R, TAG t) {",
			"\t\tif (L <= l && r <= R) {",
			"\t\t\tupdate(x, l, r, t);",
			"\t\t\treturn;",
			"\t\t}",
			"\t\tint mid = l + r >> 1;",
			"\t\tpushdown(x, l, r, mid);",
			"\t\tif (mid >= L) {",
			"\t\t\tmodify(ls, l, mid, L, R, t);",
			"\t\t}",
			"\t\tif (mid + 1 <= R) {",
			"\t\t\tmodify(rs, mid + 1, r, L, R, t);",
			"\t\t}",
			"\t\tpushup(x);",
			"\t}",
			"",
			"\tvoid modify(int l, int r, TAG t) {",
			"\t\tmodify(1, 1, n, l, r, t);",
			"\t}",
			"",
			"\tvoid modify(int pos, TAG t) {",
			"\t\tmodify(1, 1, n, pos, pos, t);",
			"\t}",
			"",
			"\tDATA query(int x, int l, int r, int L, int R) {",
			"\t\tif (L <= l && r <= R) {",
			"\t\t\treturn data[x];",
			"\t\t}",
			"\t\tint mid = l + r >> 1, res = 0;",
			"\t\tpushdown(x, l, r, mid);",
			"\t\tif (L <= mid && mid + 1 <= R) {",
			"\t\t\treturn DATA::merge(query(ls, l, mid, L, R), query(rs, mid + 1, r, L, R));",
			"\t\t}",
			"\t\tif (L <= mid) {",
			"\t\t\treturn query(ls, l, mid, L, R);",
			"\t\t}",
			"\t\tif (mid + 1 <= R) {",
			"\t\t\treturn query(rs, mid + 1, r, L, R);",
			"\t\t}",
			"\t}",
			"",
			"\tDATA query(int l, int r) {",
			"\t\treturn query(1, 1, n, l, r);",
			"\t}",
			"",
			"\tDATA query(int pos) {",
			"\t\treturn query(1, 1, n, pos, pos);",
			"\t}",
			"};"
		],
		"description": "Segment Tree"
	}
}